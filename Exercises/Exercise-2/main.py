import requests
from bs4 import BeautifulSoup
import pandas as pd
import os

# URL c·ªßa trang web ch·ª©a c√°c t·ªáp c·∫ßn t·∫£i
BASE_URL = "https://www.ncei.noaa.gov/data/local-climatological-data/access/2021/"

# D·∫•u th·ªùi gian c·∫ßn t√¨m ki·∫øm tr√™n trang web
TARGET_TIMESTAMP = "2024-01-19 10:27"

def find_target_file():
    """
    H√†m n√†y s·∫Ω duy·ªát qua trang web, t√¨m ki·∫øm t·ªáp v·ªõi d·∫•u th·ªùi gian
    TARGET_TIMESTAMP v√† tr·∫£ v·ªÅ t√™n t·ªáp t∆∞∆°ng ·ª©ng.
    """
    response = requests.get(BASE_URL)  # G·ª≠i y√™u c·∫ßu GET t·ªõi trang web
    response.raise_for_status()  # Ki·ªÉm tra n·∫øu y√™u c·∫ßu th√†nh c√¥ng

    soup = BeautifulSoup(response.text, 'lxml')  # Ph√¢n t√≠ch trang HTML

    # T√¨m t·∫•t c·∫£ c√°c d√≤ng trong b·∫£ng
    rows = soup.find_all("tr")

    for row in rows:
        cols = row.find_all("td")  # T√¨m c√°c √¥ trong d√≤ng
        if len(cols) >= 2:
            timestamp = cols[1].text.strip()  # L·∫•y d·∫•u th·ªùi gian
            if timestamp == TARGET_TIMESTAMP:
                filename = cols[0].text.strip()  # L·∫•y t√™n t·ªáp
                return filename  # Tr·∫£ v·ªÅ t√™n t·ªáp n·∫øu t√¨m th·∫•y

    # N·∫øu kh√¥ng t√¨m th·∫•y t·ªáp v·ªõi d·∫•u th·ªùi gian y√™u c·∫ßu
    raise Exception(f"File with timestamp {TARGET_TIMESTAMP} not found.")

def download_file(filename):
    """
    H√†m n√†y s·∫Ω t·∫£i t·ªáp t·ª´ URL v√† l∆∞u t·ªáp v√†o th∆∞ m·ª•c 'downloads'.
    """
    download_url = BASE_URL + filename  # X√¢y d·ª±ng URL ƒë·∫ßy ƒë·ªß ƒë·ªÉ t·∫£i t·ªáp
    local_path = os.path.join("downloads", filename)  # ƒê∆∞·ªùng d·∫´n l∆∞u t·ªáp

    # T·∫°o th∆∞ m·ª•c 'downloads' n·∫øu ch∆∞a t·ªìn t·∫°i
    os.makedirs("downloads", exist_ok=True)

    # G·ª≠i y√™u c·∫ßu GET ƒë·ªÉ t·∫£i t·ªáp
    response = requests.get(download_url)
    response.raise_for_status()  # Ki·ªÉm tra n·∫øu y√™u c·∫ßu th√†nh c√¥ng

    # L∆∞u t·ªáp v√†o h·ªá th·ªëng
    with open(local_path, 'wb') as f:
        f.write(response.content)
    print(f"Downloaded file to {local_path}")  # Th√¥ng b√°o t·ªáp ƒë√£ ƒë∆∞·ª£c t·∫£i
    return local_path  # Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n c·ªßa t·ªáp t·∫£i v·ªÅ

def analyze_file(filepath):
    """
    H√†m n√†y s·∫Ω m·ªü t·ªáp CSV, t√¨m b·∫£n ghi c√≥ nhi·ªát ƒë·ªô cao nh·∫•t v√† in ra.
    """
    df = pd.read_csv(filepath)  # ƒê·ªçc t·ªáp CSV v√†o DataFrame c·ªßa Pandas

    # Ki·ªÉm tra xem c·ªôt 'HourlyDryBulbTemperature' c√≥ t·ªìn t·∫°i kh√¥ng
    if 'HourlyDryBulbTemperature' not in df.columns:
        raise Exception("'HourlyDryBulbTemperature' column not found in the file.")  # N·∫øu kh√¥ng c√≥, n√©m l·ªói

    # Chuy·ªÉn ƒë·ªïi c·ªôt 'HourlyDryBulbTemperature' th√†nh ki·ªÉu s·ªë (n·∫øu c·∫ßn)
    df['HourlyDryBulbTemperature'] = pd.to_numeric(df['HourlyDryBulbTemperature'], errors='coerce')

    # T√¨m gi√° tr·ªã nhi·ªát ƒë·ªô cao nh·∫•t
    max_temp = df['HourlyDryBulbTemperature'].max()
    # L·ªçc ra c√°c b·∫£n ghi c√≥ nhi·ªát ƒë·ªô cao nh·∫•t
    hottest_records = df[df['HourlyDryBulbTemperature'] == max_temp]

    print("\nüå° Records with the highest HourlyDryBulbTemperature:")
    print(hottest_records)  # In ra c√°c b·∫£n ghi c√≥ nhi·ªát ƒë·ªô cao nh·∫•t

def main():
    """
    H√†m ch√≠nh s·∫Ω g·ªçi c√°c h√†m tr√™n ƒë·ªÉ t√¨m ki·∫øm t·ªáp, t·∫£i t·ªáp v√† ph√¢n t√≠ch d·ªØ li·ªáu.
    """
    try:
        print("Looking for file...")  # Th√¥ng b√°o ƒëang t√¨m ki·∫øm t·ªáp
        filename = find_target_file()  # T√¨m t·ªáp v·ªõi d·∫•u th·ªùi gian c·∫ßn t√¨m

        print(f"Found file: {filename}")  # Th√¥ng b√°o t√¨m th·∫•y t·ªáp
        filepath = download_file(filename)  # T·∫£i t·ªáp v·ªÅ

        print("Analyzing file...")  # Th√¥ng b√°o ƒëang ph√¢n t√≠ch t·ªáp
        analyze_file(filepath)  # Ph√¢n t√≠ch t·ªáp ƒë·ªÉ t√¨m b·∫£n ghi c√≥ nhi·ªát ƒë·ªô cao nh·∫•t

    except Exception as e:
        print(f"Error: {e}")  # In ra l·ªói n·∫øu c√≥

# Ch·∫°y h√†m main n·∫øu t·ªáp n√†y ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
if __name__ == "__main__":
    main()
